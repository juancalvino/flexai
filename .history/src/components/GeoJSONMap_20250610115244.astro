---
// Importar datos y configuración
import { zonesData } from '../data/zones.js';
import { MAP_CONFIG, getCSSVariables } from '../config/map.js';

// Generar variables CSS para el componente
const cssVariables = getCSSVariables();
---

<div class="geojson-map-container">
  <div id="map" class="leaflet-map"></div>
  
  <!-- Panel de información -->
  <div class="info-panel" id="zone-info">
    <!-- Selector de tipo de servicio -->
    <div class="service-selector">
      <div class="toggle-container">
        <div class="toggle-switch">
          <input type="checkbox" id="serviceToggle" class="toggle-input">
          <label for="serviceToggle" class="toggle-slider">
            <span class="toggle-option left">Standard</span>
            <span class="toggle-option right">Pro</span>
            <span class="toggle-button">
              <span class="button-text">Standard</span>
            </span>
          </label>
        </div>
      </div>
    </div>

    <div class="info-content">
      <h3 class="zone-title">Área Metropolitana de Buenos Aires</h3>
      <p class="zone-description">Pasa el cursor sobre el mapa para ver información de cada zona</p>
      <div class="price-info" style="display: none;">
        <div class="price-item">
          <span class="price-label">Precio:</span>
          <span class="price-value selected-price">$0</span>
        </div>
      </div>
      <div class="municipalities-info" style="display: none;">
        <h4>Municipios incluidos:</h4>
        <div class="municipalities-list"></div>
      </div>
    </div>
  </div>
</div>

<!-- Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
  integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
  crossorigin=""/>

<style define:vars={cssVariables}>
  .geojson-map-container {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
  }

  @media (min-width: 1024px) {
    .geojson-map-container {
      flex-direction: row;
    }
  }

  .leaflet-map {
    flex: 1;
    height: 500px;
    min-height: 400px;
    border-radius: 12px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    border: 2px solid #e5e7eb;
    position: relative;
    z-index: 10;
  }

  .info-panel {
    flex: 0 0 300px;
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    border: 2px solid #e5e7eb;
    transition: all 0.3s ease;
  }

  .service-selector {
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid #e5e7eb;
  }

  .toggle-container {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem;
  }

  .toggle-switch {
    position: relative;
    display: inline-block;
  }

  .toggle-input {
    opacity: 0;
    width: 0;
    height: 0;
    position: absolute;
  }

  .toggle-slider {
    position: relative;
    display: flex;
    align-items: center;
    width: 200px;
    height: 48px;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border-radius: 24px;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1), border-color 0.3s ease;
    box-shadow: 
      inset 0 2px 4px rgba(0, 0, 0, 0.1),
      0 2px 8px rgba(0, 0, 0, 0.1);
    border: 2px solid #e9ecef;
    overflow: hidden;
  }

  .toggle-slider:hover {
    box-shadow: 
      inset 0 2px 4px rgba(0, 0, 0, 0.15),
      0 4px 12px rgba(0, 0, 0, 0.15);
    transform: translateY(-1px);
  }

  .toggle-option {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    font-size: 0.85rem;
    font-weight: 600;
    color: #6b7280;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 1;
    pointer-events: none;
    user-select: none;
  }

  .toggle-option.left {
    left: 20px;
  }

  .toggle-option.right {
    right: 20px;
  }

  .toggle-button {
    position: absolute;
    top: 4px;
    left: 4px;
    width: var(--toggle-button-width);
    height: 40px;
    background: linear-gradient(135deg, var(--color-primary) 0%, #FFD700 100%);
    border-radius: 20px;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 
      0 4px 12px rgba(255, 207, 21, 0.3),
      inset 0 1px 2px rgba(255, 255, 255, 0.2);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2;
  }

  .button-text {
    font-size: 0.85rem;
    font-weight: 700;
    color: var(--color-secondary);
    text-shadow: 0 1px 2px rgba(255, 255, 255, 0.3);
    transition: all 0.3s ease;
    user-select: none;
  }

  .toggle-input:checked + .toggle-slider .toggle-button {
    transform: translateX(var(--toggle-button-width));
    background: linear-gradient(135deg, var(--color-secondary) 0%, var(--color-tertiary) 100%);
  }

  .toggle-input:checked + .toggle-slider .button-text {
    color: var(--color-primary);
  }

  .toggle-input:checked + .toggle-slider .toggle-option.left {
    color: var(--color-primary);
    font-weight: 700;
  }

  .toggle-input:checked + .toggle-slider .toggle-option.right {
    color: var(--color-secondary);
    font-weight: 700;
  }

  .toggle-input:not(:checked) + .toggle-slider .toggle-option.left {
    color: var(--color-secondary);
    font-weight: 700;
  }

  .toggle-input:not(:checked) + .toggle-slider .toggle-option.right {
    color: var(--color-primary);
    font-weight: 700;
  }

  .toggle-input:focus + .toggle-slider {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }

  .toggle-input:checked:focus + .toggle-slider {
    outline: 2px solid var(--color-secondary);
    outline-offset: 2px;
  }

  /* Animación de pulso sutil */
  @keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.02); }
  }

  .toggle-slider:active {
    animation: pulse 0.2s ease-in-out;
  }

  .info-content {
    height: 100%;
  }

  .zone-title {
    font-size: 1.5rem;
    font-weight: bold;
    color: #0D395A;
    margin-bottom: 0.5rem;
    font-family: 'Istok Web', sans-serif;
  }

  .zone-description {
    color: #6b7280;
    margin-bottom: 1rem;
    font-size: 1rem;
  }

  .price-info {
    margin-bottom: 1.5rem;
  }

  .price-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0;
    border-bottom: 1px solid #e5e7eb;
  }

  .price-item:last-child {
    border-bottom: none;
  }

  .price-label {
    font-weight: 600;
    color: #374151;
  }

  .price-value {
    font-weight: bold;
    font-size: 1.2rem;
  }

  .price-value.selected-price {
    color: #0D395A;
  }

  .municipalities-info h4 {
    font-weight: bold;
    color: #0D395A;
    margin-bottom: 0.5rem;
    font-size: 1.1rem;
  }

  .municipalities-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
  }

  .municipality-tag {
    background: #FFCF15;
    color: #0D395A;
    padding: 0.25rem 0.5rem;
    border-radius: 6px;
    font-size: 0.8rem;
    font-weight: 500;
  }

  /* Asegurar que Leaflet no interfiera con el header */
  .leaflet-map .leaflet-control-container,
  .leaflet-map .leaflet-popup,
  .leaflet-map .leaflet-tooltip {
    z-index: 15 !important;
  }

  .leaflet-map .leaflet-pane {
    z-index: 5 !important;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .geojson-map-container {
      flex-direction: column;
    }
    
    .info-panel {
      flex: none;
      order: -1;
    }
  }

  @media (max-width: 640px) {
    .info-panel {
      padding: 1rem;
    }
    
    .leaflet-map {
      height: 400px;
    }

    .toggle-slider {
      width: 180px;
      height: 44px;
    }

    .toggle-button {
      width: 86px;
      height: 36px;
    }

    .toggle-input:checked + .toggle-slider .toggle-button {
      transform: translateX(86px);
    }

    .toggle-option {
      font-size: 0.8rem;
    }

    .button-text {
      font-size: 0.8rem;
    }
  }
</style>

<script>
  // Debug inicial
  console.log('Script del mapa iniciando...');
  
  // Importar Leaflet y datos
  Promise.all([
    import('https://unpkg.com/leaflet@1.9.4/dist/leaflet.js'),
    import('../data/zones.js'),
    import('../config/map.js')
  ]).then(([leafletModule, zonesModule, configModule]) => {
    console.log('Leaflet y datos cargados correctamente');
    
    // Extraer datos importados
    const { zonesData, getZoneForMunicipality } = zonesModule;
    const { MAP_CONFIG, getWhatsAppUrl } = configModule;

    // Inicializar el mapa usando configuración
    const map = L.map('map').setView(MAP_CONFIG.MAP.CENTER, MAP_CONFIG.MAP.ZOOM);

    // Agregar tiles de OpenStreetMap
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '© OpenStreetMap contributors'
    }).addTo(map);

    // Referencias a elementos del DOM
    const infoPanel = document.getElementById('zone-info');
    const zoneTitle = infoPanel.querySelector('.zone-title');
    const zoneDescription = infoPanel.querySelector('.zone-description');
    const priceInfo = infoPanel.querySelector('.price-info');
    const municipalitiesInfo = infoPanel.querySelector('.municipalities-info');
    const municipalitiesList = infoPanel.querySelector('.municipalities-list');
    const selectedPrice = infoPanel.querySelector('.price-value.selected-price');
    const serviceToggle = document.getElementById('serviceToggle');
    const buttonText = infoPanel.querySelector('.button-text');

    // Función para obtener el tipo de servicio seleccionado
    function getSelectedServiceType() {
      return serviceToggle.checked ? 'pro' : 'standard';
    }

    // Función para actualizar el texto del botón
    function updateToggleText() {
      const isProSelected = serviceToggle.checked;
      buttonText.textContent = isProSelected ? 'Pro' : 'Standard';
    }

    // Función para mostrar información de zona
    function showZoneInfo(zoneId, municipalityName = null) {
      const zone = zonesData[zoneId];
      if (!zone) return;

      const serviceType = getSelectedServiceType();
      const price = serviceType === 'pro' ? zone.proPrice : zone.standardPrice;

      zoneTitle.textContent = zone.name;
      // Mostrar el nombre del municipio específico en lugar de la descripción genérica
      zoneDescription.textContent = municipalityName || zone.description;
      selectedPrice.textContent = `$${price.toLocaleString()}`;
      
      // Mostrar municipios
      municipalitiesList.innerHTML = '';
      zone.municipalities.forEach(municipality => {
        const tag = document.createElement('span');
        tag.className = 'municipality-tag';
        tag.textContent = municipality;
        municipalitiesList.appendChild(tag);
      });

      priceInfo.style.display = 'block';
      municipalitiesInfo.style.display = 'block';
    }

    // Función para ocultar información
    function hideZoneInfo() {
      // Si hay una zona seleccionada, mostrar esa información
      if (selectedZone) {
        showZoneInfo(selectedZone, selectedMunicipality);
        return;
      }
      
      // Si no hay zona seleccionada, mostrar mensaje por defecto
      zoneTitle.textContent = 'Área Metropolitana de Buenos Aires';
      zoneDescription.textContent = 'Pasa el cursor sobre el mapa para ver información de cada zona';
      priceInfo.style.display = 'none';
      municipalitiesInfo.style.display = 'none';
    }

    // Variables para manejar zonas
    let currentZone = null; // Zona mostrada temporalmente (hover)
    let selectedZone = null; // Zona seleccionada permanentemente (click)
    let currentMunicipality = null; // Municipio actual (hover)
    let selectedMunicipality = null; // Municipio seleccionado (click)

    // Event listener para cambios en el toggle de servicio
    serviceToggle.addEventListener('change', () => {
      updateToggleText();
      // Actualizar la información de la zona que esté visible (hover o seleccionada)
      if (currentZone) {
        showZoneInfo(currentZone, currentMunicipality);
      } else if (selectedZone) {
        showZoneInfo(selectedZone, selectedMunicipality);
      }
    });

    // Inicializar el texto del toggle
    updateToggleText();

    // URLs de los GeoJSON desde configuración
    const buenosAiresGeojsonUrl = MAP_CONFIG.GEOJSON_URLS.BUENOS_AIRES;
    const cabaGeojsonUrl = MAP_CONFIG.GEOJSON_URLS.CABA;
    
    console.log('Iniciando carga de GeoJSON...');
    
    // Primero cargar solo Buenos Aires para asegurar que funciona
    fetch(buenosAiresGeojsonUrl)
      .then(response => response.json())
      .then(buenosAiresData => {
        // Debug: mostrar información del GeoJSON
        console.log('Municipios de Buenos Aires:', buenosAiresData.features.length);
        console.log('Todos los nombres en GeoJSON:', buenosAiresData.features.map(f => 
          f.properties.departamento || 'sin nombre'
        ).sort());
        
        // Filtrar solo los municipios del AMBA con mapeo exacto
        const ambaFeatures = buenosAiresData.features.filter(feature => {
          const name = feature.properties.departamento || '';
          const zone = getZoneForMunicipality(name);
          
          // Filtro especial para San Fernando: excluir el que limita con Campana
          if (name.toLowerCase() === 'san fernando') {
            // Obtener el centroide del polígono para determinar ubicación
            const geometry = feature.geometry;
            if (geometry && geometry.coordinates) {
              // Calcular centroide aproximado
              let totalLat = 0, totalLng = 0, pointCount = 0;
              
              const processCoordinates = (coords) => {
                if (Array.isArray(coords[0])) {
                  coords.forEach(processCoordinates);
                } else {
                  totalLng += coords[0];
                  totalLat += coords[1];
                  pointCount++;
                }
              };
              
              processCoordinates(geometry.coordinates);
              
              if (pointCount > 0) {
                const centroidLat = totalLat / pointCount;
                const centroidLng = totalLng / pointCount;
                
                console.log(`🔍 San Fernando encontrado: lat=${centroidLat}, lng=${centroidLng}`);
                
                // Por ahora, incluir ambos para ver las coordenadas exactas
                // Luego ajustaremos el filtro
              }
            }
          }
          
          if (zone) {
            console.log(`Municipio AMBA encontrado: ${name} -> ${zone}`);
          } else {
            console.log(`Municipio NO mapeado: ${name}`);
          }
          return zone !== null;
        });

        // Crear el layer GeoJSON
        const geojsonLayer = L.geoJSON(ambaFeatures, {
          style: function(feature) {
            const name = feature.properties.departamento || '';
            const zone = getZoneForMunicipality(name);
            
            // Si no tiene zona asignada, no mostrar
            if (!zone || !zonesData[zone]) {
              return MAP_CONFIG.STYLES.DISABLED;
            }
            
            const zoneData = zonesData[zone];
            
            return {
              fillColor: zoneData.color,
              weight: MAP_CONFIG.STYLES.DEFAULT.weight,
              opacity: MAP_CONFIG.STYLES.DEFAULT.opacity,
              color: MAP_CONFIG.STYLES.DEFAULT.color,
              dashArray: MAP_CONFIG.STYLES.DEFAULT.dashArray,
              fillOpacity: MAP_CONFIG.STYLES.DEFAULT.fillOpacity
            };
          },
          onEachFeature: function(feature, layer) {
            const name = feature.properties.departamento || '';
            const zone = getZoneForMunicipality(name);
            
            // Solo agregar interactividad si tiene zona válida
            if (!zone || !zonesData[zone]) {
              return; // No agregar eventos a municipios fuera del AMBA
            }
            
            const zoneData = zonesData[zone];
            
            // Agregar eventos
            layer.on({
              mouseover: function(e) {
                const currentLayer = e.target;
                currentLayer.setStyle({
                  weight: MAP_CONFIG.STYLES.HOVER.weight,
                  color: MAP_CONFIG.COLORS.PRIMARY,
                  dashArray: MAP_CONFIG.STYLES.HOVER.dashArray,
                  fillOpacity: MAP_CONFIG.STYLES.HOVER.fillOpacity,
                  fillColor: zoneData.hoverColor
                });
                currentLayer.bringToFront();
                currentZone = zone;
                currentMunicipality = name;
                showZoneInfo(zone, name);
              },
              mouseout: function(e) {
                geojsonLayer.resetStyle(e.target);
                currentZone = null;
                currentMunicipality = null;
                hideZoneInfo();
              },
              click: function(e) {
                // Establecer como zona seleccionada permanentemente
                selectedZone = zone;
                selectedMunicipality = name;
                currentZone = zone;
                currentMunicipality = name;
                showZoneInfo(zone, name);
                
                // Resaltar visualmente la zona seleccionada
                const currentLayer = e.target;
                currentLayer.setStyle({
                  weight: 4,
                  color: MAP_CONFIG.COLORS.PRIMARY,
                  dashArray: MAP_CONFIG.STYLES.HOVER.dashArray,
                  fillOpacity: 0.8,
                  fillColor: zoneData.color
                });
                currentLayer.bringToFront();
              }
            });
            
            // Tooltip - Mostrar el nombre real del municipio
            layer.bindTooltip(`${name} (${zoneData.name})`, {
              permanent: false,
              direction: 'center',
              className: 'custom-tooltip'
            });
          }
        }).addTo(map);

        // Ajustar la vista del mapa a los datos
        map.fitBounds(geojsonLayer.getBounds());
        
        console.log('Mapa cargado exitosamente con municipios del GBA');
        
        // Ahora intentar cargar CABA como segundo paso
        fetch(cabaGeojsonUrl)
          .then(response => response.json())
          .then(cabaData => {
            console.log('CABA GeoJSON cargado:', cabaData.features.length, 'comunas');
            
            // Usar todas las comunas de CABA como features individuales pero tratarlas como una zona
            const cabaFeatures = cabaData.features.map(feature => ({
              ...feature,
              properties: {
                ...feature.properties,
                departamento: 'Ciudad Autónoma de Buenos Aires', // Nombre normalizado para mapeo
                zona: 'CABA'
              }
            }));
            
            // Crear un layer separado para CABA
            const cabaLayer = L.geoJSON(cabaFeatures, {
              style: function(feature) {
                const zone = 'CABA';
                const zoneData = zonesData[zone];
                
                return {
                  fillColor: zoneData.color,
                  weight: MAP_CONFIG.STYLES.DEFAULT.weight,
                  opacity: MAP_CONFIG.STYLES.DEFAULT.opacity,
                  color: MAP_CONFIG.STYLES.DEFAULT.color,
                  dashArray: MAP_CONFIG.STYLES.DEFAULT.dashArray,
                  fillOpacity: MAP_CONFIG.STYLES.DEFAULT.fillOpacity
                };
              },
              onEachFeature: function(feature, layer) {
                const zone = 'CABA';
                const zoneData = zonesData[zone];
                
                // Agregar eventos
                layer.on({
                  mouseover: function(e) {
                    const currentLayer = e.target;
                    currentLayer.setStyle({
                      weight: MAP_CONFIG.STYLES.HOVER.weight,
                      color: MAP_CONFIG.COLORS.PRIMARY,
                      dashArray: MAP_CONFIG.STYLES.HOVER.dashArray,
                      fillOpacity: MAP_CONFIG.STYLES.HOVER.fillOpacity,
                      fillColor: zoneData.hoverColor
                    });
                    currentLayer.bringToFront();
                    currentZone = zone;
                    currentMunicipality = 'CABA';
                    showZoneInfo(zone, 'CABA');
                  },
                  mouseout: function(e) {
                    cabaLayer.resetStyle(e.target);
                    currentZone = null;
                    currentMunicipality = null;
                    hideZoneInfo();
                  },
                  click: function(e) {
                    // Establecer CABA como zona seleccionada permanentemente
                    selectedZone = zone;
                    selectedMunicipality = 'CABA';
                    currentZone = zone;
                    currentMunicipality = 'CABA';
                    showZoneInfo(zone, 'CABA');
                    
                    // Resaltar visualmente CABA seleccionada
                    const currentLayer = e.target;
                    currentLayer.setStyle({
                      weight: 4,
                      color: MAP_CONFIG.COLORS.PRIMARY,
                      dashArray: MAP_CONFIG.STYLES.HOVER.dashArray,
                      fillOpacity: 0.8,
                      fillColor: zoneData.color
                    });
                    currentLayer.bringToFront();
                  }
                });
                
                // Tooltip
                layer.bindTooltip(`CABA (${zoneData.name})`, {
                  permanent: false,
                  direction: 'center',
                  className: 'custom-tooltip'
                });
              }
            }).addTo(map);
            
            console.log('CABA agregado al mapa exitosamente');
          })
          .catch(error => {
            console.warn('No se pudo cargar CABA, pero el mapa GBA funciona:', error);
          });
      })
      .catch(error => {
        console.error('Error cargando datos GeoJSON:', error);
        console.error('Stack:', error.stack);
        
        // Fallback: mostrar un mensaje de error
        const errorDiv = document.createElement('div');
        errorDiv.innerHTML = `
          <div style="padding: 2rem; text-align: center; color: #dc2626;">
            <h3>Error cargando el mapa</h3>
            <p>No se pudieron cargar los datos geográficos. Por favor, intenta recargar la página.</p>
            <p style="font-size: 0.8rem; margin-top: 1rem;">Error: ${error.message}</p>
          </div>
        `;
        document.getElementById('map').appendChild(errorDiv);
      });
  });
</script>

<style>
  .custom-tooltip {
    background: rgba(13, 57, 90, 0.9);
    color: white;
    border: none;
    border-radius: 6px;
    padding: 0.5rem;
    font-weight: 600;
  }
</style>