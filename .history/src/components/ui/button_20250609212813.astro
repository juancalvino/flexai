---
export interface Props {
  variant?: "primary" | "secondary" | "outline" | "ghost" | "danger";
  size?: "sm" | "md" | "lg" | "xl";
  href?: string;
  class?: string;
  disabled?: boolean;
  loading?: boolean;
  icon?: string;
  iconPosition?: "left" | "right";
  fullWidth?: boolean;
  type?: "button" | "submit" | "reset";
  block?: boolean; // Backwards compatibility
  style?: "outline" | "primary" | "inverted"; // Backwards compatibility
  [key: string]: any;
}

const {
  variant = "primary",
  size = "md",
  href,
  class: className = "",
  disabled = false,
  loading = false,
  icon,
  iconPosition = "left",
  fullWidth = false,
  type = "button",
  block, // Backwards compatibility
  style, // Backwards compatibility
  ...rest
} = Astro.props;

// Handle backwards compatibility
const finalVariant = style === "outline" ? "outline" : variant;
const finalFullWidth = block || fullWidth;

const baseClasses = "inline-flex items-center justify-center font-medium transition-all duration-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:opacity-60 disabled:cursor-not-allowed";

const variantClasses = {
  primary: "bg-brand-yellow-500 text-brand-blue-900 hover:bg-brand-yellow-600 focus-visible:ring-brand-yellow-500 shadow-sm hover:shadow-md active:scale-[0.98]",
  secondary: "bg-brand-blue-500 text-white hover:bg-brand-blue-600 focus-visible:ring-brand-blue-500 shadow-sm hover:shadow-md active:scale-[0.98]",
  outline: "border-2 border-brand-blue-500 text-brand-blue-500 hover:bg-brand-blue-50 focus-visible:ring-brand-blue-500",
  ghost: "text-brand-blue-500 hover:bg-brand-blue-50 focus-visible:ring-brand-blue-500",
  danger: "bg-error-500 text-white hover:bg-error-600 focus-visible:ring-error-500 shadow-sm hover:shadow-md active:scale-[0.98]"
};

const sizeClasses = {
  sm: "px-3 py-1.5 text-sm rounded-lg gap-1.5",
  md: "px-4 py-2 text-base rounded-xl gap-2",
  lg: "px-6 py-3 text-lg rounded-2xl gap-2.5",
  xl: "px-8 py-4 text-xl rounded-3xl gap-3"
};

const classes = [
  baseClasses,
  variantClasses[finalVariant],
  sizeClasses[size],
  finalFullWidth && "w-full",
  className
].filter(Boolean).join(" ");

const Tag = href ? "a" : "button";
---

<Tag
  class={classes}
  href={href}
  disabled={disabled || loading}
  type={!href ? type : undefined}
  {...rest}
>
  {loading && (
    <svg
      class="animate-spin h-4 w-4"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle
        class="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        stroke-width="4"
      ></circle>
      <path
        class="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      ></path>
    </svg>
  )}
  {icon && !loading && iconPosition === "left" && (
    <span class="flex-shrink-0">{icon}</span>
  )}
  <slot />
  {icon && !loading && iconPosition === "right" && (
    <span class="flex-shrink-0">{icon}</span>
  )}
</Tag>