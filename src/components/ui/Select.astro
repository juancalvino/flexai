---
export interface Props {
  name: string;
  id?: string;
  label?: string;
  options: Array<{ value: string; label: string; disabled?: boolean }>;
  value?: string;
  placeholder?: string;
  error?: string;
  hint?: string;
  required?: boolean;
  disabled?: boolean;
  class?: string;
  selectClass?: string;
  size?: "sm" | "md" | "lg";
}

const {
  name,
  id,
  label,
  options = [],
  value,
  placeholder = "Selecciona una opci√≥n",
  error,
  hint,
  required = false,
  disabled = false,
  class: className = "",
  selectClass = "",
  size = "md",
} = Astro.props;

const selectId = id || name;

const sizeClasses = {
  sm: "px-3 py-1.5 pr-8 text-sm",
  md: "px-4 py-2.5 pr-10 text-base",
  lg: "px-5 py-3 pr-12 text-lg"
};

const baseSelectClasses = "w-full rounded-xl border bg-white transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:bg-neutral-50 disabled:cursor-not-allowed appearance-none cursor-pointer";

const stateClasses = error
  ? "border-error-300 focus:border-error-500 focus:ring-error-500"
  : "border-neutral-300 focus:border-brand-blue-500 focus:ring-brand-blue-500";

const selectClasses = [
  baseSelectClasses,
  sizeClasses[size],
  stateClasses,
  selectClass
].filter(Boolean).join(" ");
---

<div class={className}>
  {label && (
    <label
      for={selectId}
      class="block text-sm font-medium text-neutral-700 mb-1.5"
    >
      {label}
      {required && <span class="text-error-500 ml-0.5">*</span>}
    </label>
  )}
  
  <div class="relative">
    <select
      name={name}
      id={selectId}
      required={required}
      disabled={disabled}
      class={selectClasses}
      aria-invalid={error ? "true" : undefined}
      aria-describedby={error ? `${selectId}-error` : hint ? `${selectId}-hint` : undefined}
    >
      {placeholder && (
        <option value="" disabled selected={!value}>
          {placeholder}
        </option>
      )}
      {options.map((option) => (
        <option
          value={option.value}
          disabled={option.disabled}
          selected={value === option.value}
        >
          {option.label}
        </option>
      ))}
    </select>
    
    <!-- Custom arrow icon -->
    <div class="absolute right-3 top-1/2 -translate-y-1/2 pointer-events-none">
      <svg
        class="w-4 h-4 text-neutral-400"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M19 9l-7 7-7-7"
        />
      </svg>
    </div>
  </div>
  
  {error && (
    <p id={`${selectId}-error`} class="mt-1.5 text-sm text-error-600">
      {error}
    </p>
  )}
  
  {hint && !error && (
    <p id={`${selectId}-hint`} class="mt-1.5 text-sm text-neutral-500">
      {hint}
    </p>
  )}
</div>