---
export interface Props {
  class?: string;
  hoverScale?: number;
  hoverRotate?: number;
  glowEffect?: boolean;
  shadowIntensity?: 'sm' | 'md' | 'lg' | 'xl';
}

const {
  class: className = '',
  hoverScale = 1.05,
  hoverRotate = 0,
  glowEffect = false,
  shadowIntensity = 'md',
} = Astro.props;

const shadowClasses = {
  sm: 'hover:shadow-lg',
  md: 'hover:shadow-xl',
  lg: 'hover:shadow-2xl',
  xl: 'hover:shadow-[0_25px_50px_-12px_rgba(0,0,0,0.25)]'
};
---

<div 
  class={`
    hover-card 
    ${shadowClasses[shadowIntensity]}
    ${glowEffect ? 'glow-effect' : ''}
    ${className}
  `}
  data-scale={hoverScale}
  data-rotate={hoverRotate}
  data-glow={glowEffect}
>
  <slot />
</div>

<script>
  class HoverCardController {
    private cards: NodeListOf<Element> | null = null;

    constructor() {
      this.init();
    }

    init() {
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.setupCards());
      } else {
        this.setupCards();
      }

      document.addEventListener('astro:page-load', () => this.setupCards());
    }

    setupCards() {
      this.cards = document.querySelectorAll('.hover-card');
      
      if (!this.cards.length) return;

      this.cards.forEach(card => {
        const htmlCard = card as HTMLElement;
        this.setupCard(htmlCard);
      });
    }

    setupCard(card: HTMLElement) {
      const scale = parseFloat(card.getAttribute('data-scale') || '1.05');
      const rotate = parseFloat(card.getAttribute('data-rotate') || '0');
      const hasGlow = card.getAttribute('data-glow') === 'true';

      // Mouse enter
      card.addEventListener('mouseenter', () => {
        if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) return;
        
        const transforms = [];
        
        if (scale !== 1) {
          transforms.push(`scale(${scale})`);
        }
        
        if (rotate !== 0) {
          transforms.push(`rotate(${rotate}deg)`);
        }
        
        card.style.transform = transforms.join(' ');
        
        if (hasGlow) {
          card.classList.add('active-glow');
        }
      });

      // Mouse leave
      card.addEventListener('mouseleave', () => {
        card.style.transform = '';
        
        if (hasGlow) {
          card.classList.remove('active-glow');
        }
      });

      // Enhanced mouse move for tilt effect (optional)
      if (rotate !== 0) {
        card.addEventListener('mousemove', (e) => {
          if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) return;
          
          const rect = card.getBoundingClientRect();
          const centerX = rect.left + rect.width / 2;
          const centerY = rect.top + rect.height / 2;
          
          const mouseX = e.clientX - centerX;
          const mouseY = e.clientY - centerY;
          
          const rotateX = (mouseY / rect.height) * -10; // Max 10deg tilt
          const rotateY = (mouseX / rect.width) * 10;   // Max 10deg tilt
          
          const transforms = [];
          
          if (scale !== 1) {
            transforms.push(`scale(${scale})`);
          }
          
          transforms.push(`rotateX(${rotateX}deg) rotateY(${rotateY}deg)`);
          
          card.style.transform = transforms.join(' ');
        });
      }
    }
  }

  // Initialize hover cards
  let hoverCardInstance: HoverCardController | null = null;

  function initHoverCards() {
    if (hoverCardInstance) {
      // No need to destroy, just reinitialize
    }
    hoverCardInstance = new HoverCardController();
  }

  // Initialize on first load
  initHoverCards();
</script>

<style>
  .hover-card {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    transform-origin: center;
    will-change: transform;
    cursor: pointer;
  }
  
  .glow-effect {
    position: relative;
  }
  
  .glow-effect::before {
    content: '';
    position: absolute;
    inset: -2px;
    background: linear-gradient(45deg, 
      theme('colors.brand.yellow.400'), 
      theme('colors.brand.blue.400'), 
      theme('colors.brand.yellow.400')
    );
    border-radius: inherit;
    opacity: 0;
    z-index: -1;
    transition: opacity 0.3s ease;
    filter: blur(8px);
  }
  
  .glow-effect.active-glow::before {
    opacity: 0.7;
  }
  
  /* Disable hover effects on touch devices */
  @media (hover: none) {
    .hover-card {
      transform: none !important;
    }
    
    .glow-effect::before {
      display: none;
    }
  }
  
  /* Disable animations on reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .hover-card {
      transition: none !important;
      transform: none !important;
    }
    
    .glow-effect::before {
      display: none;
    }
  }
</style>